#!/bin/sh


if [[ -z "$KUBE_URL" ]]; then
  echo "Missing KUBE_URL."
  exit 1
fi
if [[ -z "$KUBE_TOKEN" ]]; then
  echo "Missing KUBE_TOKEN."
  exit 1
fi
if [[ -z "$KUBE_NAMESPACE" ]]; then
  echo "Missing KUBE_NAMESPACE."
  exit 1
fi

# get folder with k8s objects
FOLDER=$1

# copy all objects to data folder
cp -r $FOLDER /data

# replace all placeholders with env variables in place
echo "Replacing placeholders with env variables..."
for entry in /data/*
do
  file=$(echo $entry | cut -d"/" -f3)

  /envsubst -i $entry -o $entry
done

# authenticate kubectl
echo "Authenticating to cluster: $KUBE_URL"
export KUBE_CLUSTER_OPTIONS=
if [[ -n "$KUBE_CA_PEM" ]]; then
  echo "Using KUBE_CA_PEM..."
  echo "$KUBE_CA_PEM" > "$(pwd)/kube.ca.pem"
  export KUBE_CLUSTER_OPTIONS=--certificate-authority="$(pwd)/kube.ca.pem"
fi
kubectl config set-cluster default-cluster --server=$KUBE_URL $KUBE_CLUSTER_OPTIONS
kubectl config set-credentials default-admin --token=$KUBE_TOKEN $KUBE_CLUSTER_OPTIONS
kubectl config set-context default-context --user=default-admin --cluster=default-cluster
kubectl config use-context default-context

# deploy objects to k8s 
echo "Creating namespace..."
cat <<EOF | kubectl apply -f -
kind: Namespace
apiVersion: v1
metadata:
  name: $CI_PROJECT_NAMESPACE
EOF

echo "Deploying objects..."
kubectl apply -f /data

echo "Checking deployment status..."
kubectl rollout status deployment/$CI_PROJECT_NAME --namespace=$CI_PROJECT_NAMESPACE

